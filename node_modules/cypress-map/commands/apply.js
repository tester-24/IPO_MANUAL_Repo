/// <reference types="cypress" />
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var registerQuery = require('./utils').registerQuery;
registerQuery('apply', function (callback) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof callback !== 'function') {
        throw new Error('Expected a function to apply');
    }
    var log = Cypress.log({ name: 'apply', message: callback.name });
    return function (subject) {
        log.set({
            $el: subject,
        });
        return callback.apply(void 0, __spreadArray(__spreadArray([], args, false), [subject], false));
    };
});
registerQuery('applyRight', function (callback) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof callback !== 'function') {
        throw new Error('Expected a function to apply');
    }
    var log = Cypress.log({
        name: 'applyRight',
        message: callback.name,
    });
    return function (subject) {
        log.set({
            $el: subject,
        });
        return callback.apply(void 0, __spreadArray([subject], args, false));
    };
});
registerQuery('applyToFirst', function (callback) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof callback !== 'function') {
        throw new Error('Expected a function to apply');
    }
    var log = Cypress.log({
        name: 'applyToFirst',
        message: callback.name,
    });
    return function (subject) {
        if (Cypress.dom.isJquery(subject) || Array.isArray(subject)) {
            log.set({
                $el: subject,
            });
            return callback.apply(void 0, __spreadArray(__spreadArray([], args, false), [subject[0]], false));
        }
        else {
            throw new Error('Expected a jQuery object or an array subject');
        }
    };
});
registerQuery('applyToFirstRight', function (callback) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof callback !== 'function') {
        throw new Error('Expected a function to apply');
    }
    var log = Cypress.log({
        name: 'applyToFirstRight',
        message: callback.name,
    });
    return function (subject) {
        if (Cypress.dom.isJquery(subject) || Array.isArray(subject)) {
            log.set({
                $el: subject,
            });
            return callback.apply(void 0, __spreadArray([subject[0]], args, false));
        }
        else {
            throw new Error('Expected a jQuery object or an array subject');
        }
    };
});
